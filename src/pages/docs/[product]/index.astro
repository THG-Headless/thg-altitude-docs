---
import DocsLayout from '../../../layouts/DocsLayout.astro';
import DocsSidebar from '../../../components/DocsSidebar.astro';
import { getCollection } from 'astro:content';
import { products } from '../../../config/products';
import { getProductVersions, getLatestVersion, isVersionFolder } from '../../../utils/versions';

// Ensure parameters are defined
const productParam = Astro.params.product || '';

// Split the product parameter to handle different path types
const productParts = productParam.split('/');
let productId = productParts[0];
let version = null;

// Check if this is a versioned path (e.g., "platform/v2.3.0")
if (productParts.length > 1 && isVersionFolder(productParts[1])) {
  version = productParts[1];
} else {
  // This is a nested path (e.g., "elements/facets")
  // For nested paths, we keep the full path as the productId
  // but we don't set a version
  productId = productParam;
}

// Check if this is a direct access to a product index (not a versioned or nested page)
const currentPath = Astro.url.pathname;
const isDirectProductAccess = currentPath === `/docs/${productId}` || currentPath === `/docs/${productId}/`;

if (isDirectProductAccess && !version) {
  // Try to find content for the direct product path
  const indexPath = `${productId}/index`;
  const possiblePaths = [
    `${indexPath}.md`,
    `${indexPath}.mdx`
  ];
  
  const docs = await getCollection('docs');
  const doc = docs.find(doc => possiblePaths.includes(doc.id));
  
  // If no direct content found, check for versions
  if (!doc) {
    console.log(`No direct content found for ${productId}, checking for versions`);
    // Get all versions for this product
    const versions = await getProductVersions(productId);
    
    // If versions exist, redirect to the latest version
    if (versions.length > 0) {
      const latestVersion = getLatestVersion(versions);
      if (latestVersion) {
        console.log(`Redirecting to latest version: ${latestVersion}`);
        return Astro.redirect(`/docs/${productId}/${latestVersion}`);
      }
    }
  }
}

// Get product info from config
const product = products[productId] || {
  id: productId,
  name: productId.charAt(0).toUpperCase() + productId.slice(1).replace(/-/g, ' '),
  description: "",
  icon: "/statics/icons/altitude.svg",
  status: "live",
  quickLinks: []
};

// Get the entry from the collection
let Content;
let headings = [];
let docData: { title?: string; description?: string } = {};

try {
  // Construct the document ID for the index file
  const indexPath = `${productId}/index`;
  
  // Try both .md and .mdx extensions
  const possiblePaths = [
    `${indexPath}.md`,
    `${indexPath}.mdx`
  ];
  
  // Find the document
  const docs = await getCollection('docs');
  const doc = docs.find(doc => possiblePaths.includes(doc.id));
  
  if (doc) {
    console.log('Found doc:', doc.id);
    docData = doc.data;
    
    // Render the content
    const result = await (doc as any).render();
    Content = result.Content;
    headings = result.headings;
    console.log('Content available:', !!Content);
  } else {
    console.error('Index doc not found for:', productId);
  }
} catch (error) {
  console.error(`Error rendering content: ${error}`);
}
---

<DocsLayout
  title={docData.title || `${product.name} Documentation`}
  description={docData.description || `Documentation for ${product.name}`}
  product={product}
  headings={headings}
>
  <DocsSidebar slot="sidebar" product={product} />
  {Content ? <Content /> : <p>Documentation content not available.</p>}
</DocsLayout>