---
import DocsLayout from '../../../../layouts/DocsLayout.astro';
import DocsSidebar from '../../../../components/DocsSidebar.astro';
import { getCollection } from 'astro:content';
import { products } from '../../../../config/products';
import { isVersionFolder } from '../../../../utils/versions';

// Ensure parameters are defined
const productId = Astro.params.product || '';
const versionId = Astro.params.version || '';
const slugPath = Astro.params.slug || '';

// TypeScript type assertion for slugPath
type SlugPath = string | string[] | undefined;
const typedSlugPath = slugPath as SlugPath;

// Get product info from config
const product = products[productId] || {
  id: productId,
  name: productId.charAt(0).toUpperCase() + productId.slice(1).replace(/-/g, ' '),
  description: "",
  icon: "/statics/icons/altitude.svg",
  status: "live",
  quickLinks: []
};

// Debug logging
console.log('Slug params:', { productId, version: versionId, slug: slugPath });

// Get the entry from the collection
let Content;
let headings = [];
let docData: { title?: string; description?: string } = {};

try {
  // Construct the document ID based on URL parameters
  let slugString = '';
  
  // Handle both string and array slug paths
  if (typeof typedSlugPath === 'string') {
    slugString = typedSlugPath;
  } else if (Array.isArray(typedSlugPath)) {
    slugString = typedSlugPath.join('/');
  }
  
  console.log('Looking for document with slug:', slugString);
  
  // Try to find the document with the exact path first
  const exactPath = `${productId}/${versionId}/${slugString}`;
  const exactPathWithExt = [
    `${exactPath}.md`,
    `${exactPath}.mdx`
  ];
  
  // Try to find the document with index file
  const indexPath = [
    `${exactPath}/index.md`,
    `${exactPath}/index.mdx`
  ];
  
  // Get all possible paths
  const possiblePaths = [...exactPathWithExt, ...indexPath];
  console.log('Possible paths:', possiblePaths);
  
  // Find the document
  const docs = await getCollection('docs');
  const doc = docs.find(doc => possiblePaths.includes(doc.id));
  
  if (doc) {
    console.log('Found doc:', doc.id);
    docData = doc.data;
    
    // Render the content
    const result = await (doc as any).render();
    Content = result.Content;
    headings = result.headings;
    console.log('Content available:', !!Content);
  } else {
    console.error('Doc not found for path:', slugString);
    console.log('Available docs:', docs.map(d => d.id));
  }
} catch (error) {
  console.error(`Error rendering content: ${error}`);
}
---

<DocsLayout
  title={docData.title || `${product.name} Documentation`}
  description={docData.description || `Documentation for ${product.name}`}
  product={product}
  headings={headings}
>
  <DocsSidebar slot="sidebar" product={product} />
  {Content ? <Content /> : <p>Documentation content not available.</p>}
</DocsLayout>