---
import DocsLayout from '../../../layouts/DocsLayout.astro';
import DocsSidebar from '../../../components/DocsSidebar.astro';
import { getCollection } from 'astro:content';
import { products } from '../../../config/products';
import { isVersionFolder } from '../../../utils/versions';

// Ensure parameters are defined
const productId = Astro.params.product || '';

// TypeScript type assertion for slugPath
type SlugPath = string | string[] | undefined;
const typedSlugPath = Astro.params.slug as SlugPath;

// Get product info from config
const product = products[productId] || {
  id: productId,
  name: productId.charAt(0).toUpperCase() + productId.slice(1).replace(/-/g, ' '),
  description: "",
  icon: "/statics/icons/altitude.svg",
  status: "live",
  quickLinks: []
};

// Get the entry from the collection
let Content;
let headings = [];
let docData: { title?: string; description?: string } = {};

try {
  // Construct the document ID based on URL parameters
  let slugString = '';
  
  // Handle both string and array slug paths
  if (typeof typedSlugPath === 'string') {
    slugString = typedSlugPath;
  } else if (Array.isArray(typedSlugPath)) {
    slugString = typedSlugPath.join('/');
  }
  
  console.log('Looking for document with slug:', slugString);
  
  // Try to find the document with the exact path first
  const exactPath = `${productId}/${slugString}`;
  const exactPathWithExt = [
    `${exactPath}.md`,
    `${exactPath}.mdx`
  ];
  
  // Try to find the document with index file
  const indexPath = [
    `${exactPath}/index.md`,
    `${exactPath}/index.mdx`
  ];
  
  // Get all possible paths
  const possiblePaths = [...exactPathWithExt, ...indexPath];
  console.log('Possible paths:', possiblePaths);
  
  // Find the document
  const docs = await getCollection('docs');
  
  // Debug: Log all docs
  console.log('All docs:', docs.map(d => d.id));
  
  // Debug: Log possible paths
  console.log('Looking for these paths:', possiblePaths);
  
  // Handle all paths consistently, including special files like "changelog"
  {
    // Try to find an exact match for regular paths
    const doc = docs.find(doc => possiblePaths.includes(doc.id));
    
    if (doc) {
      console.log('Found doc:', doc.id);
      docData = doc.data;
      
      // Render the content
      const result = await (doc as any).render();
      Content = result.Content;
      headings = result.headings;
      console.log('Content available:', !!Content);
    } else {
      console.log('Doc not found for path:', slugString);
      console.log('Looking for these paths:', possiblePaths);
      
      // Try a more flexible approach - check if any doc starts with the path
      const flexibleDoc = docs.find(doc =>
        possiblePaths.some(path => doc.id.startsWith(path))
      );
      
      if (flexibleDoc) {
        console.log('Found doc with flexible matching:', flexibleDoc.id);
        docData = flexibleDoc.data;
        
        // Render the content
        const result = await (flexibleDoc as any).render();
        Content = result.Content;
        headings = result.headings;
        console.log('Content available (flexible):', !!Content);
      } else {
        console.log('No doc found even with flexible matching');
        // Try direct match with the product and slug
        const directPath = `${productId}/${slugString}`;
        console.log('Trying direct match with:', directPath);
        const directDoc = docs.find(doc =>
          doc.id === `${directPath}.md` ||
          doc.id === `${directPath}.mdx`
        );
        
        if (directDoc) {
          console.log('Found doc with direct matching:', directDoc.id);
          docData = directDoc.data;
          
          // Render the content
          const result = await (directDoc as any).render();
          Content = result.Content;
          headings = result.headings;
          console.log('Content available (direct):', !!Content);
        } else {
          console.log('No doc found with any matching strategy');
        }
      }
    }
  }
} catch (error) {
  console.error(`Error rendering content: ${error}`);
}
---

<DocsLayout
  title={docData.title || `${product.name} Documentation`}
  description={docData.description || `Documentation for ${product.name}`}
  product={product}
  headings={headings}
>
  <DocsSidebar slot="sidebar" product={product} />
  {Content ? <Content /> : <p>Documentation content not available.</p>}
</DocsLayout>