---
import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeStringify from 'rehype-stringify';
import rehypePrismPlus from 'rehype-prism-plus';
import remarkGfm from 'remark-gfm';
import { visit } from 'unist-util-visit';
import type { Root, BlockContent } from 'mdast';

interface Props {
  content: string;
}

const { content } = Astro.props;

// Custom plugin to handle tip blocks
function remarkTipBlocks() {
  return (tree: Root) => {
    visit(tree, 'blockquote', (node: BlockContent) => {
      if (node.type === 'blockquote' && node.children && node.children[0]) {
        const firstChild = node.children[0];
        if (firstChild.type === 'paragraph' && firstChild.children && firstChild.children[0]) {
          const textNode = firstChild.children[0];
          if (textNode.type === 'text') {
            const tipMatch = textNode.value.match(/^:::(tip|warning|note)\[(.*?)\]/);
            if (tipMatch) {
              const [fullMatch, type, title] = tipMatch;
              // Remove the tip syntax from the text
              textNode.value = textNode.value.slice(fullMatch.length);
              
              // Add custom data to the node
              node.data = node.data || {};
              node.data.hName = 'div';
              node.data.hProperties = {
                className: type.toLowerCase(),
                'data-title': title
              };
            }
          }
        }
      }
    });
  };
}

// Process the content
const processedContent = await unified()
  .use(remarkParse)
  .use(remarkGfm)
  .use(remarkTipBlocks)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypePrismPlus)
  .use(rehypeStringify, { allowDangerousHtml: true })
  .process(content);
---

<div class="markdown">
  <Fragment set:html={processedContent.toString()} />
</div>

<style is:global>
  /* Import Prism.js theme */
  @import 'prismjs/themes/prism-tomorrow.css';

  /* Custom styles for tip blocks */
  .markdown .tip,
  .markdown .warning,
  .markdown .note {
    @apply relative p-4 my-6 rounded-lg;
  }

  .markdown .tip {
    @apply bg-stone-50 dark:bg-stone-900/30 border-l-4 border-stone-500;
  }

  .markdown .warning {
    @apply bg-yellow-50 dark:bg-yellow-900/30 border-l-4 border-yellow-500;
  }

  .markdown .note {
    @apply bg-stone-50 dark:bg-stone-800 border-l-4 border-stone-500;
  }

  .markdown [data-title]::before {
    @apply block font-semibold mb-2;
    content: attr(data-title);
  }

  /* Code block styles */
  .markdown pre {
    @apply relative rounded-lg overflow-hidden my-6;
  }

  .markdown pre[class*="language-"] {
    @apply bg-stone-900;
  }

  .markdown code {
    @apply font-mono text-sm;
  }

  .markdown :not(pre) > code {
    @apply bg-stone-100 dark:bg-stone-800 rounded px-1.5 py-0.5 text-stone-900 dark:text-stone-100;
  }

  /* Table styles */
  .markdown table {
    @apply w-full my-6 border-collapse;
  }

  .markdown th {
    @apply bg-stone-100 dark:bg-stone-800 px-4 py-2 text-left font-semibold border border-stone-200 dark:border-stone-700;
  }

  .markdown td {
    @apply px-4 py-2 border border-stone-200 dark:border-stone-700;
  }

  /* List styles */
  .markdown ul {
    @apply my-6 ml-6 list-disc;
  }

  .markdown ol {
    @apply my-6 ml-6 list-decimal;
  }

  .markdown li {
    @apply mb-2;
  }

  .markdown .emoji-list {
    @apply list-none ml-0;
  }

  .markdown .emoji-list li {
    @apply flex items-start gap-3;
  }

  .markdown .emoji-list li span:first-child {
    @apply text-xl flex-shrink-0;
  }

  /* Heading styles */
  .markdown h1 {
    @apply text-4xl font-bold mb-8 mt-2;
  }

  .markdown h2 {
    @apply text-3xl font-semibold mb-6 mt-12 border-b border-stone-200 dark:border-stone-800 pb-2;
  }

  .markdown h3 {
    @apply text-2xl font-semibold mb-4 mt-8;
  }

  .markdown h4 {
    @apply text-xl font-semibold mb-4 mt-6;
  }

  /* Paragraph styles */
  .markdown p {
    @apply mb-6 leading-7;
  }

  /* Link styles */
  .markdown a {
    @apply text-stone-600 dark:text-stone-400 hover:underline;
  }

  /* Blockquote styles */
  .markdown blockquote:not([class]) {
    @apply border-l-4 border-stone-200 dark:border-stone-700 pl-4 italic my-6;
  }
</style>