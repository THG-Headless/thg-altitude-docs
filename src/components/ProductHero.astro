---
interface Props {
  title: string;
  description: string;
  icon: string;
  primaryAction: {
    text: string;
    href: string;
  };
  secondaryAction?: {
    text: string;
    href: string;
  };
  highlights?: {
    title: string;
    description: string;
  }[];
}

const { 
  title, 
  description, 
  icon,
  primaryAction,
  secondaryAction,
  highlights = []
} = Astro.props;
---
<div id="hero" class="overflow-hidden flex items-center relative -mt-[74px] py-[74px] pb-[120px] min-h-[calc(60vh+74px)]">
  <!-- Bottom gradient overlay - stronger fade at the very bottom -->
  <div class="absolute bottom-0 left-0 w-full h-62 bg-gradient-to-t from-black to-transparent z-10 pointer-events-none"></div>
  
  <!-- Vignette ellipse overlay - gradual fade from middle to bottom -->
  <div class="absolute inset-0 z-10 pointer-events-none" aria-hidden="true">
    <div class="absolute inset-0 bg-[linear-gradient(to_bottom,_transparent_30%,_rgba(0,0,0,0.4)_70%,_rgba(0,0,0,1)_100%)]"></div>
  </div>
  
  <!-- Blur backdrop -->
  <div class="backdrop-blur-2xl w-full h-full -z-0 absolute top-0 left-0"></div>
  <div class="w-full rounded-1xl container mx-auto overflow-hidden outline outline-white/10 bg-gradient-to-b from-stone-900/30 via-transparent to-transparent">
    <div class="relative">
      <!-- Content -->
      <div class="relative container px-4 lg:px-0 mx-auto py-20 pb-10">
        <div class="max-w-3xl mx-auto text-center px-4 sm:px-6 lg:px-8">
          <!-- Icon -->
          <div class="flex justify-center mb-8">
            <div class="relative">
              <div class="absolute inset-0 blur-xl rounded-full"></div>
              <div class="relative w-20 h-20  rounded-2xl p-3 border border-stone-500/20 shadow-[0px_0px_76px_0px_rgba(87,87,87,0.3)]">
                <img src={icon} alt="" class="w-full h-full" />
              </div>
            </div>
          </div>

          <!-- Title -->
          <h1 class="block font-sans text-4xl md:text-5xl lg:text-6xl" transition:name="hero-title">
            {title}
          </h1>

          <!-- Description -->
          <p class="mt-6 text-stone-400" transition:name="hero-description">
            {description}
          </p>

          <!-- Actions -->
          <div class="mt-10 gap-4 flex justify-center flex-wrap">
            <a 
              href={primaryAction.href}
              class="inline-flex justify-center items-center gap-x-2 text-center bg-white text-black border border-transparent text-sm rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2 focus:ring-offset-stone-800 transition py-3 px-6"
            >
              {primaryAction.text}
              <svg class="w-3 h-3" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M5.27921 2L10.9257 7.64645C11.1209 7.84171 11.1209 8.15829 10.9257 8.35355L5.27921 14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </a>
            {secondaryAction && 
            <a 
              href={secondaryAction.href}
              class="inline-flex justify-center items-center gap-x-2 text-center text-sm text-white hover:text-stone-200 focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2 focus:ring-offset-stone-800 transition py-3 px-4"
            >
              {secondaryAction.text}
              <svg class="w-2.5 h-2.5" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M5.27921 2L10.9257 7.64645C11.1209 7.84171 11.1209 8.15829 10.9257 8.35355L5.27921 14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
              </svg>
            </a>
            }
          </div>
        </div>

        <!-- Highlights -->
        {highlights.length > 0 && (
          <div class="mt-20 grid sm:grid-cols-2 lg:grid-cols-4 gap-8 px-4 sm:px-6 lg:px-8 relative z-10">
            {highlights.map(highlight => (
              <div class="bg-black/20 backdrop-blur-sm rounded-lg p-6 border border-stone-700/50 transition-colors">
                <h3 class="text-base font-semibold text-stone-200 mb-2">
                  {highlight.title}
                </h3>
                <p class="text-sm text-stone-400">
                  {highlight.description}
                </p>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
</div>
<script>
  "use strict";

// Performance-optimized animation for ProductHero component
// Uses fewer, thicker lines with simplified calculations to reduce CPU usage
// while maintaining the fluid visual effect

// TypeScript type definitions
interface Point {
  x: number;
  y: number;
}

interface Message {
  message: string;
}

type QualityLevel = 'high' | 'medium' | 'low' | 'auto';

// Canvas and context
let canv: HTMLCanvasElement | undefined;
let ctx: CanvasRenderingContext2D | null | undefined;
let maxx = 0;
let maxy = 0;

// Animation variables
let messages: Message[] = [];
let dist = 0;
let radius = 0;
let nbx = 0;
let nby = 0;
let grid: Line[][] = [];
let animationFrameId: number | undefined;
let isVisible = true;
let lastFrameTime = 0;
let frameInterval = 1000 / 60; // Target 30fps instead of 60fps
let qualityLevel: QualityLevel = 'low'; // 'high', 'medium', 'low', or 'auto'

// Math shortcuts
const { sin, cos, PI, floor, ceil, random, sqrt } = Math;
const m2PI = PI * 2;

// Simplified noise function (much faster than SimplexNoise)
function simpleNoise(x: number, y: number, z: number): number {
  // Simple hash function
  const hash = (x * 12.9898 + y * 78.233 + z * 43.2) % 1;
  return Math.sin(hash * 43758.5453) * 0.5 + 0.5;
}

// Lerp function for smooth transitions
function lerp(p0: Point, p1: Point, alpha: number): Point {
  return {
    x: p1.x * alpha + p0.x * (1 - alpha),
    y: p1.y * alpha + p0.y * (1 - alpha)
  };
}

// Random number in range
function alea(mini: number, maxi?: number): number {
  if (typeof maxi === "undefined") return mini * random();
  return mini + random() * (maxi - mini);
}

// Simplified Line class with thicker lines
class Line {
  kx: number;
  ky: number;
  c: Point;
  color: string;
  phase: number;

  constructor(kx: number, ky: number) {
    this.kx = kx;
    this.ky = ky;
    this.c = { x: kx * dist, y: ky * dist };
    
    // Create varied purple colors with different brightness levels
    const purpleHue = 270 + (random() * 40 - 20); // Range from 250-290
    const saturation = 70 + random() * 30; // Range from 70-100%
    const brightness = 30 + random() * 60; // Range from 30-90% (both dark and light variants)
    
    this.color = `hsl(${purpleHue} ${saturation}% ${brightness}%)`;
    this.phase = random() * m2PI; // Random starting phase
  }

  draw(t: number, lum: number): void {
    if (!ctx) return;
    
    // Simplified calculation - much less CPU intensive
    const noiseScale = 20; // Larger value = smoother animation
    const timeScale = 0.001; // Slower animation
    
    // Use simpler noise calculation
    const angle = this.phase + t * timeScale +
                 sin(this.kx / noiseScale + t * 0.0005) *
                 cos(this.ky / noiseScale + t * 0.0005);
    
    ctx.beginPath();
    ctx.moveTo(this.c.x, this.c.y);
    ctx.lineTo(
      this.c.x + radius * cos(angle),
      this.c.y + radius * sin(angle)
    );
    
    // Create dynamic purple colors with varying brightness and saturation
    // Extract color components from the stored color for base values
    const baseColorMatch = this.color.match(/hsl\((\d+\.?\d*) (\d+\.?\d*)% (\d+\.?\d*)%\)/);
    
    if (baseColorMatch) {
      const baseHue = parseFloat(baseColorMatch[1]);
      const baseSat = parseFloat(baseColorMatch[2]);
      const baseLum = parseFloat(baseColorMatch[3]);
      
      // Vary the hue, saturation, and luminance based on the angle
      const hueVariation = sin(angle) * 15;
      const satVariation = cos(angle) * 10;
      const lumVariation = sin(angle * 1.5) * 15;
      
      // Calculate final color values with constraints
      const finalHue = baseHue + hueVariation; // Vary around base hue
      const finalSat = Math.max(60, Math.min(100, baseSat + satVariation)); // Keep between 60-100%
      const finalLum = Math.max(20, Math.min(90, baseLum + lumVariation)); // Keep between 20-90%
      
      ctx.strokeStyle = `hsl(${finalHue} ${finalSat}% ${finalLum}%)`;
    } else {
      // Fallback if color parsing fails
      const purpleHue = 270 + (sin(angle) * 20);
      ctx.strokeStyle = `hsl(${purpleHue} 85% ${lum}%)`;
    }
    
    ctx.lineWidth = 20; // Thicker lines
    ctx.stroke();
  }
}

// Animation loop with performance optimizations
function animate(timestamp: number): void {
  // Skip frames to maintain target framerate
  if (timestamp - lastFrameTime < frameInterval) {
    animationFrameId = requestAnimationFrame(animate);
    return;
  }
  
  lastFrameTime = timestamp;
  
  // Process any messages
  const message = messages.shift();
  if (message && (message.message === "reset" || message.message === "click")) {
    startOver();
  }
  
  // Skip rendering if not visible
  if (!isVisible) {
    animationFrameId = requestAnimationFrame(animate);
    return;
  }
  
  // Skip if context is not available
  if (!ctx) {
    animationFrameId = requestAnimationFrame(animate);
    return;
  }
  
  // Animation state
  const mousePos = { x: maxx / 2, y: maxy / 2 }; // Fixed position instead of tracking
  const currentPos = mousePos; // No lerping needed with fixed position
  const lum = 50; // Fixed luminance for better performance
  
  // Clear and draw
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, maxx, maxy);
  
  // Only draw visible lines (optimization)
  const t = timestamp * 0.1; // Slower time progression
  
  // Draw fewer lines based on quality level
  const skipFactor = getQualitySkipFactor();
  
  for (let ky = 0; ky < grid.length; ky += skipFactor) {
    const row = grid[ky];
    for (let kx = 0; kx < row.length; kx += skipFactor) {
      row[kx].draw(t, lum);
    }
  }
  
  animationFrameId = requestAnimationFrame(animate);
}

// Determine how many lines to skip based on quality level
function getQualitySkipFactor(): number {
  if (qualityLevel === 'high') return 1;
  if (qualityLevel === 'medium') return 2;
  if (qualityLevel === 'low') return 3;
  
  // Auto: determine based on screen size
  const totalPoints = nbx * nby;
  if (totalPoints > 2000) return 5;
  if (totalPoints > 1000) return 3;
  return 1;
}

// Initialize or reset the animation
function startOver(): boolean {
  // Get canvas dimensions
  const hero = document.getElementById("hero");
  if (!hero) return false;
  
  maxx = hero.offsetWidth;
  maxy = hero.offsetHeight;
  
  // Set up canvas
  if (!canv || !ctx) return false;
  
  canv.width = maxx;
  canv.height = maxy;
  ctx.lineJoin = "round";
  ctx.lineCap = "round";
  
  // Fill background
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, maxx, maxy);
  
  // Calculate grid parameters - MUCH larger spacing for fewer points
  dist = alea(20, 40); // Increased from 12-20 to 30-50
  radius = dist * 10; // Adjusted radius for thicker lines
  
  // Calculate grid dimensions with fewer points
  nbx = ceil(maxx / dist) + 1;
  nby = ceil(maxy / dist) + 1;
  
  // Create grid with fewer points
  grid = Array(nby).fill(0)
    .map((_, ky) => Array(nbx).fill(0)
      .map((_, kx) => new Line(kx, ky)));
  
  // Auto-detect performance capability
  detectPerformance();
  
  return true;
}

// Simple performance detection
function detectPerformance(): void {
  // Use device pixel ratio as a rough estimate of device capability
  const dpr = window.devicePixelRatio || 1;
  const screenSize = window.innerWidth * window.innerHeight;
  
  if (dpr <= 1 || screenSize > 2000000) {
    qualityLevel = 'low';
    frameInterval = 1000 / 20; // 20fps
  } else if (dpr <= 2) {
    qualityLevel = 'medium';
    frameInterval = 1000 / 30; // 30fps
  } else {
    qualityLevel = 'high';
    frameInterval = 1000 / 40; // 40fps
  }
}

// Visibility observer to pause animation when not visible
function setupVisibilityObserver(): void {
  if (!('IntersectionObserver' in window)) return;
  
  const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {
    entries.forEach(entry => {
      isVisible = entry.isIntersecting;
    });
  }, { threshold: 0.1 });
  
  const heroElement = document.getElementById('hero');
  if (heroElement) observer.observe(heroElement);
}

// Debounced resize handler
let resizeTimeout: number | undefined;
function handleResize(): void {
  if (resizeTimeout) {
    clearTimeout(resizeTimeout);
  }
  resizeTimeout = setTimeout(() => {
    messages.push({ message: "reset" });
  }, 200) as unknown as number; // Cast to number for compatibility
}

// Initialize animation
function initializeAnimation(): void {
  canv = document.createElement("canvas");
  canv.style.position = "absolute";
  canv.style.left = "0";
  canv.style.top = "0";
  canv.style.zIndex = "-1";
  canv.style.pointerEvents = "none";
  canv.style.opacity = "0.08";
  
  const heroElement = document.getElementById("hero");
  if (!heroElement) return;
  
  // Remove any existing canvas to avoid duplicates
  const existingCanvas = heroElement.querySelector("canvas");
  if (existingCanvas) {
    existingCanvas.remove();
  }
  
  heroElement.appendChild(canv);
  ctx = canv.getContext("2d");
  
  if (!ctx) {
    console.error("Could not get 2D context from canvas");
    return;
  }
  
  // Set up event listeners
  canv.addEventListener("click", () => messages.push({ message: "click" }));
  
  // Initialize animation
  messages = [{ message: "reset" }];
  setupVisibilityObserver();
  requestAnimationFrame(animate);
}

// Function to clean up animation resources
function cleanupAnimation(): void {
  // Remove the canvas if it exists
  const heroElement = document.getElementById("hero");
  if (heroElement) {
    const existingCanvas = heroElement.querySelector("canvas");
    if (existingCanvas) {
      existingCanvas.remove();
    }
  }
  
  // Cancel any pending animation frames
  if (typeof window !== 'undefined' && window.cancelAnimationFrame && animationFrameId) {
    window.cancelAnimationFrame(animationFrameId);
    animationFrameId = undefined;
  }
  
  // Clear any pending timeouts
  if (resizeTimeout) {
    clearTimeout(resizeTimeout);
    resizeTimeout = undefined;
  }
}

// Initialize on first load
if (typeof window !== 'undefined') {
  // Only run in browser environment
  initializeAnimation();
  
  // Initialize on page transitions
  document.addEventListener('astro:page-load', initializeAnimation);
  
  // Clean up before page transitions
  document.addEventListener('astro:before-preparation', cleanupAnimation);
  
  // Handle resize events with debouncing
  window.addEventListener("resize", handleResize);
}
</script>