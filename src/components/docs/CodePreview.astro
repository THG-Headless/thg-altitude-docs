---
/**
 * CodePreview - A component that shows both a preview and code view of HTML content
 *
 * This component provides a tabbed interface with:
 * - A "Preview" tab that shows the rendered HTML
 * - A "Code" tab that shows the HTML code with syntax highlighting
 *
 * It's designed to work with view transitions and includes proper tab switching.
 *
 * Usage:
 *
 * ```astro
 * import CodePreview from '@components/docs/CodePreview.astro';
 *
 * <CodePreview>
 *   <button class="skin-primary-emphasised interactive btn">Click me</button>
 * </CodePreview>
 * ```
 */
import CodeBlock from './CodeBlock.astro';

// Generate a unique ID for this component instance
const componentId = Math.random().toString(36).substring(2, 9);

// Get the HTML content from the slot
const slotContent = await Astro.slots.render("default");

// The preview content is the raw HTML
const previewContent = slotContent;

// Clean up the HTML content for code display (remove scripts and styles)
const htmlContent = slotContent
  .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, "")
  .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, "")
  .trim();
---

<div class="not-content rounded-lg border border-black shadow-sm mb-6">
  <div class="bg-black rounded-lg">
    <div
      class="flex justify-between items-center bg-black rounded-t-lg border-b border-black"
    >
      <div class="flex">
        <button
          id={`previewTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0 rounded-tl-md"
          style="color: #e1e4e8;"
          aria-selected="true"
          role="tab"
        >
          Preview
        </button>
        <button
          id={`codeTab-${componentId}`}
          class="relative px-4 py-2 text-sm transition-all duration-200 ease-in-out border-0"
          style="color: #e1e4e8;"
          aria-selected="false"
          role="tab"
        >
          Code
        </button>
      </div>
      <button
        id={`copyButton-${componentId}`}
        class="px-4 py-2 text-sm text-gray-400 hover:text-accent-400 flex items-center gap-1 transition-colors duration-200 cursor-pointer"
        aria-label="Copy code to clipboard"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="copy-icon"
          viewBox="0 0 16 16"
        >
          <path
            d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"
          ></path>
          <path
            d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"
          ></path>
        </svg>
        <span>Copy</span>
      </button>
    </div>

    <div
      id={`previewPanel-${componentId}`}
      class="skin !mx-4 !mt-4 !pb-4 rounded-site p-4 not-prose"
      role="tabpanel"
    >
      <Fragment set:html={previewContent} />
    </div>
    <div
      id={`codePanel-${componentId}`}
      class="bg-black p-4 hidden rounded-b-lg"
      role="tabpanel"
    >
      <div class="sl-markdown-content prose dark:prose-invert max-w-none max-h-[500px] overflow-auto">
        <CodeBlock lang="html" code={htmlContent} />
      </div>
    </div>
  </div>
</div>

<script define:vars={{ componentId }}>
  function setupTabs() {
    const previewTab = document.getElementById(`previewTab-${componentId}`);
    const codeTab = document.getElementById(`codeTab-${componentId}`);
    const previewPanel = document.getElementById(`previewPanel-${componentId}`);
    const codePanel = document.getElementById(`codePanel-${componentId}`);

    if (!previewTab || !codeTab || !previewPanel || !codePanel) return;

    const switchTab = (selectedTab, otherTab, selectedPanel, otherPanel) => {
      selectedTab.setAttribute("aria-selected", "true");
      selectedTab.classList.add(
        "border-accent-500",
        "text-accent-500",
        "font-bold",
        "border-b-2"
      );
      selectedTab.classList.remove(
        "text-gray-400",
        "border-transparent",
        "font-normal"
      );

      otherTab.setAttribute("aria-selected", "false");
      otherTab.classList.remove(
        "border-accent-500",
        "text-accent-500",
        "font-bold",
        "border-b-2"
      );
      otherTab.classList.add(
        "text-gray-400",
        "border-transparent",
        "font-normal"
      );

      selectedPanel.classList.remove("hidden");
      otherPanel.classList.add("hidden");
    };

    // Set initial state - preview tab active, code tab inactive
    previewTab.setAttribute("aria-selected", "true");
    previewTab.classList.add(
      "border-accent-500",
      "text-accent-500",
      "font-bold",
      "border-b-2"
    );
    
    codeTab.setAttribute("aria-selected", "false");
    codeTab.classList.add(
      "text-gray-400",
      "border-transparent",
      "font-normal"
    );
    
    // Show preview panel, hide code panel
    previewPanel.classList.remove("hidden");
    codePanel.classList.add("hidden");

    // Remove existing event listeners to prevent duplicates
    const newPreviewTab = previewTab.cloneNode(true);
    const newCodeTab = codeTab.cloneNode(true);
    
    previewTab.parentNode.replaceChild(newPreviewTab, previewTab);
    codeTab.parentNode.replaceChild(newCodeTab, codeTab);

    newPreviewTab.addEventListener("click", () => {
      switchTab(newPreviewTab, newCodeTab, previewPanel, codePanel);
    });

    newCodeTab.addEventListener("click", () => {
      switchTab(newCodeTab, newPreviewTab, codePanel, previewPanel);
    });
  }

  function setupCopyButton() {
    const copyButton = document.getElementById(`copyButton-${componentId}`);
    if (!copyButton) return;

    // Remove existing event listeners to prevent duplicates
    const newCopyButton = copyButton.cloneNode(true);
    copyButton.parentNode.replaceChild(newCopyButton, copyButton);

    newCopyButton.addEventListener("click", async () => {
      const codePanel = document.getElementById(`codePanel-${componentId}`);
      if (!codePanel) return;

      try {
        const preElement = codePanel.querySelector("pre");
        const codeText = preElement ? preElement.textContent : "";

        await navigator.clipboard.writeText(codeText);

        const originalContent = newCopyButton.innerHTML;
        newCopyButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="check-icon" viewBox="0 0 16 16">
          <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
        </svg>
        <span>Copied!</span>
      `;
        newCopyButton.classList.add("text-green-500", "dark:text-green-400");

        setTimeout(() => {
          newCopyButton.innerHTML = originalContent;
          newCopyButton.classList.remove("text-green-500", "dark:text-green-400");
        }, 2000);
      } catch (err) {
        console.error("Failed to copy text: ", err);
      }
    });
  }

  // Initialize component
  function initializeComponent() {
    setupTabs();
    setupCopyButton();
  }

  // Initialize on DOMContentLoaded (for initial page load)
  document.addEventListener("DOMContentLoaded", initializeComponent);
  
  // Initialize on astro:page-load (for view transitions)
  document.addEventListener("astro:page-load", initializeComponent);
  
  // Also initialize immediately for the current render
  initializeComponent();
</script>

<style is:global>
  pre {
    margin: 0 !important;
  }

  code {
    font-size: 0.9em !important;
    line-height: 1.5 !important;
  }

  .tab-button:focus-visible {
    border-radius: 4px;
  }

  /* Override any theme-based colors in the component */
  [id^="copyButton-"] {
    color: #9ca3af !important; /* text-gray-400 */
  }

  [id^="copyButton-"]:hover {
    color: var(--accent-400) !important;
  }

  [id^="previewTab-"][aria-selected="true"],
  [id^="codeTab-"][aria-selected="true"] {
    color: #ffffff !important;
    font-weight: bold !important;
  }

  [id^="previewTab-"][aria-selected="false"],
  [id^="codeTab-"][aria-selected="false"] {
    color: #9ca3af !important; /* text-gray-400 */
  }
</style>